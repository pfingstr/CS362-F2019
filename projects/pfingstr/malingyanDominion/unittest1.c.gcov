        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:#define CARD_TEST "Ambassador"
        -:    9:
        -:   10:
        -:   11:/*  First you reveal a card from your hand.
        -:   12:    Then take 0, 1, or 2 copies of that card from your hand and put them on top of their Supply pile.
        -:   13:    Then each other player gains a copy of that card from the Supply.
        -:   14:    If there are not enough copies to go around, deal them out in turn order, starting with the player to your left. */
        -:   15:
        -:   16://gcc -o unittest1 dominion.c rngs.c unittest1.c
        -:   17:
function fakeAssert called 8 returned 100% blocks executed 100%
        8:   18:void fakeAssert(int i, int j, int *ErrCnt)
        -:   19:{
        8:   20:    if(i == j)
branch  0 taken 88% (fallthrough)
branch  1 taken 13%
        -:   21:    {
        7:   22:        printf("TEST %d PASSED\n", *ErrCnt);
call    0 returned 100%
        -:   23:    }
        -:   24:    else
        -:   25:    {
        1:   26:        printf("TEST %d FAILED\n", *ErrCnt);
call    0 returned 100%
        -:   27:    }
        8:   28:    *ErrCnt = *ErrCnt+1;
        -:   29:    
        8:   30:}
        -:   31:
function main called 1 returned 100% blocks executed 100%
        1:   32:int main() 
        -:   33:{
        -:   34:
        1:   35:    int handpos = 0, bonus = 0;
        1:   36:    int seed = 1000;
        -:   37:    //number of players
        1:   38:    int numPlayers = 2;
        1:   39:    int player=0;
        -:   40:    //each holds a pointer to game state variable
        -:   41:	struct gameState basePlayer, testPlayer;
        -:   42:    //Kingdom cards avaliable for purchase
        1:   43:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   44:			sea_hag, tribute, smithy, council_room};
        1:   45:    int ErrCnt = 1;
        -:   46:    //int count, count2;
        -:   47:    //count = count2 = 0;
        -:   48:
        -:   49:
        1:   50:    printf("TESTING - %s\n", CARD_TEST);
call    0 returned 100%
        -:   51:	
        -:   52:    // 1 Initialize a game state and player cards
        1:   53:    fakeAssert(initializeGame(numPlayers, k, seed, &basePlayer), 0, &ErrCnt);
call    0 returned 100%
call    1 returned 100%
        -:   54:
        -:   55:	//Copy the game state of player to testPlayer
        1:   56:	memcpy(&testPlayer, &basePlayer, sizeof(struct gameState));
        -:   57:
        -:   58:    // 2 Check deck count is equal for both
        1:   59:    fakeAssert( (*(int*)testPlayer.deckCount), (*(int*)basePlayer.deckCount), &ErrCnt);
call    0 returned 100%
        -:   60:
        -:   61:    //Add ambassador card to players hand
        1:   62:    testPlayer.hand[player][testPlayer.handCount[player]] = ambassador;
        1:   63:    testPlayer.handCount[player]++;
        -:   64:
        -:   65:    // 3 Check that the ambassador card count is +1 for testplayer
        -:   66:    // chand hand count is 5 for base player and 6 for test player.
        1:   67:    fakeAssert(basePlayer.handCount[player] + 1, testPlayer.handCount[player], &ErrCnt);
call    0 returned 100%
        -:   68:    
        -:   69:    ////////////////////PLAY CARD//////////////////////////////
        -:   70:    //Play ambassador card with a 3 for choice 1 and 3 for choice 2 
        1:   71:    cardEffect(ambassador, 3, 3, 0, &testPlayer, handpos, &bonus);
call    0 returned 100%
        -:   72:	
        -:   73:	// 4 Check the players hand count post play -4 from 6 for testplayer and -0 from 5 for baseplayer.
        1:   74:    fakeAssert(basePlayer.handCount[player], testPlayer.handCount[player] + 3, &ErrCnt);
call    0 returned 100%
        -:   75:    
        -:   76:    //Find Bug 2: commented out check for number of cards avaliable in hand
        -:   77:    // 5 Check to see that error -1 placed at hand index 4. 
        1:   78:    fakeAssert(testPlayer.hand[player][4], -1, &ErrCnt);
call    0 returned 100%
        -:   79:     // 6 Check to see that error -1 placed at hand index 5 
        1:   80:    fakeAssert(testPlayer.hand[player][5], -1, &ErrCnt);
call    0 returned 100%
        -:   81:
        -:   82:    // Re Initialize a game state and player cards
        1:   83:    fakeAssert(initializeGame(numPlayers, k, seed, &basePlayer), 0, &ErrCnt);
call    0 returned 100%
call    1 returned 100%
        -:   84:	//Copy the game state of player to testPlayer
        1:   85:	memcpy(&testPlayer, &basePlayer, sizeof(struct gameState));
        -:   86:    //Add ambassador card to players hand
        1:   87:    testPlayer.hand[player][testPlayer.handCount[player]] = ambassador;
        1:   88:    testPlayer.handCount[player]++;
        -:   89:    
        -:   90:    /*for (i = 0; i < testPlayer.handCount[player]; i++){
        -:   91:        printf("T%d\n", testPlayer.hand[player][i]);
        -:   92:    }
        -:   93:    for (i = 0; i < basePlayer.handCount[player]; i++){
        -:   94:        printf("B%d\n", basePlayer.hand[player][i]);
        -:   95:    }*/
        -:   96:    ////////////////////PLAY CARD//////////////////////////////
        -:   97:    //Play ambassador card with a 3 for choice 1 and -2(illegal) for choice 2 
        -:   98:    int l;
        1:   99:    l = cardEffect(ambassador, 3, -2, 0, &testPlayer, handpos, &bonus);
call    0 returned 100%
        1:  100:    fakeAssert(l, -1, &ErrCnt);
call    0 returned 100%
        1:  101:    return 0;
        -:  102:}
        -:  103:
        -:  104:/*int ambassadorEffect(int choice1, int choice2, int handPos, struct gameState *state, int currentPlayer)
        -:  105:{
        -:  106:    int j = 0;
        -:  107:    int i;
        -:  108:
        -:  109:    //used to check if player has enough cards to discard
        -:  110:    //
        -:  111:    //ambassadorEffect() bug 1
        -:  112:    if (choice2 > 2 && choice2 < 0)
        -:  113:    // if (choice2 > 2 || choice2 < 0)
        -:  114:    {
        -:  115:        return -1;
        -:  116:    }
        -:  117:
        -:  118:    if (choice1 == handPos)
        -:  119:    {
        -:  120:        return -1;
        -:  121:    }
        -:  122:
        -:  123:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  124:    {
        -:  125:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  126:        {
        -:  127:            j++;
        -:  128:        }
        -:  129:    }
        -:  130:
        -:  131:    //ambassadorEffect() bug 2
        -:  132:    //
        -:  133:    // if (j < choice2)
        -:  134:    // {
        -:  135:    //   return -1;
        -:  136:    //}
        -:  137:
        -:  138:    if (DEBUG)
        -:  139:        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  140:
        -:  141:    //increase supply count for choosen card by amount being discarded
        -:  142:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  143:
        -:  144:    //each other player gains a copy of revealed card
        -:  145:    for (i = 0; i < state->numPlayers; i++)
        -:  146:    {
        -:  147:        if (i != currentPlayer)
        -:  148:        {
        -:  149:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  150:        }
        -:  151:    }
        -:  152:
        -:  153:    //discard played card from hand
        -:  154:    discardCard(handPos, currentPlayer, state, 0);
        -:  155:
        -:  156:    //trash copies of cards returned to supply
        -:  157:    for (j = 0; j < choice2; j++)
        -:  158:    {
        -:  159:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  160:        {
        -:  161:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  162:            {
        -:  163:                discardCard(i, currentPlayer, state, 1);
        -:  164:                break;
        -:  165:            }
        -:  166:        }
        -:  167:    }
        -:  168:    return 0;
        -:  169:}*/
