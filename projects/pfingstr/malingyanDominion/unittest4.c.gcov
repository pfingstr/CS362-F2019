        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    0:Source is newer than graph
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include <math.h>
        -:    9:#define CARD_TEST "Minion"
        -:   10:
        -:   11://gcc -o unittest4 dominion.c rngs.c unittest4.c
        -:   12:
function fakeAssert called 4 returned 100% blocks executed 100%
        4:   13:void fakeAssert(int i, int j, int *ErrCnt)
        -:   14:{
        4:   15:    if(i == j)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -:   16:    {
        3:   17:        printf("TEST %d PASSED\n", *ErrCnt);
call    0 returned 100%
        -:   18:    }
        -:   19:    else
        -:   20:    {
        1:   21:        printf("TEST %d FAILED\n", *ErrCnt);
call    0 returned 100%
        -:   22:    }
        4:   23:    *ErrCnt = *ErrCnt+1;
        -:   24:    
        4:   25:}
        -:   26:
function main called 1 returned 100% blocks executed 100%
        1:   27:int main() 
        -:   28:{
        -:   29:    //int i;
        1:   30:    int handpos = 0, bonus = 0;
        1:   31:    int seed = 1000;
        -:   32:    //number of players
        1:   33:    int numPlayers = 2;
        1:   34:    int player=0;
        -:   35:    //each holds a pointer to game state variable
        -:   36:	struct gameState basePlayer, testPlayer;
        -:   37:    //Kingdom cards avaliable for purchase
        1:   38:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   39:			sea_hag, tribute, smithy, council_room};
        1:   40:    int ErrCnt = 1;
        -:   41:   // int count, count2;
        -:   42:   // count = count2 = 0;
        -:   43:
        -:   44:
        -:   45:
        1:   46:    printf("TESTING - %s\n", CARD_TEST);
call    0 returned 100%
        -:   47:	
        -:   48:    // 1 Initialize a game state and player cards
        1:   49:    fakeAssert(initializeGame(numPlayers, k, seed, &basePlayer), 0, &ErrCnt);
call    0 returned 100%
call    1 returned 100%
        -:   50:	
        1:   51:    drawCard(player+1, &testPlayer);
call    0 returned 100%
        1:   52:    drawCard(player+1, &testPlayer);
call    0 returned 100%
        1:   53:    drawCard(player+1, &testPlayer);
call    0 returned 100%
        1:   54:    drawCard(player+1, &testPlayer);
call    0 returned 100%
        1:   55:    drawCard(player+1, &testPlayer);
call    0 returned 100%
        1:   56:    printf("%d\n", testPlayer.handCount[player+1]);
call    0 returned 100%
        -:   57:    
        1:   58:    //Copy the game state of player to testPlayer
        -:   59:	memcpy(&testPlayer, &basePlayer, sizeof(struct gameState));
        1:   60:    // 2 Check deck count is equal for both
call    0 returned 100%
        -:   61:    fakeAssert( (*(int*)testPlayer.deckCount), (*(int*)basePlayer.deckCount), &ErrCnt);
        1:   62:    //Add minion card to players hand at position 6
        1:   63:    testPlayer.hand[player][testPlayer.handCount[player]] = minion;
        -:   64:    testPlayer.handCount[player]++;
        1:   65:    // 3 Check hand count +1
call    0 returned 100%
        -:   66:    fakeAssert(basePlayer.handCount[player] + 1, testPlayer.handCount[player], &ErrCnt);
        -:   67:    
        1:   68:    //Play minion card with choice 2.
call    0 returned 100%
        -:   69:    cardEffect(minion, 0, 1, 0, &testPlayer, handpos, &bonus);
        -:   70:	//Try to detect bug 2
        -:   71:    /*for (i = 0; i < testPlayer.handCount[player]; i++){
        -:   72:        printf("testp hand: %d\n", testPlayer.hand[player][i]);		
        -:   73:    }*/
        1:   74:    //Test player should only gain 1 estate, with supply of 8-1. Failure == caught bug 2. 
call    0 returned 100%
call    1 returned 100%
        -:   75:    fakeAssert(supplyCount(estate, &testPlayer), 7, &ErrCnt);
        -:   76:    
        -:   77:   // printf("%d\n", basePlayer.hand[1][0]);
        -:   78:    //int l = whoseTurn(&testPlayer);
        -:   79:    //  printf("%d\n", l);
        -:   80:    
        -:   81:    
        -:   82:
        -:   83:}
        -:   84:
        -:   85:/*void minionEffect(int handPos, int choice1, int choice2, struct gameState *state, int currentPlayer)
        -:   86:{
        -:   87:    int i;
        -:   88:    int j;
        -:   89:
        -:   90:    //+1 action
        -:   91:    state->numActions++;
        -:   92:
        -:   93:    //discard card from hand
        -:   94:    discardCard(handPos, currentPlayer, state, 0);
        -:   95:
        -:   96:    if (choice1)
        -:   97:    {
        -:   98:        state->coins = state->coins + 2;
        -:   99:    }
        -:  100:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  101:    {
        -:  102:        //discard hand
        -:  103:        while (numHandCards(state) > 0)
        -:  104:        {
        -:  105:            discardCard(handPos, currentPlayer, state, 0);
        -:  106:        }
        -:  107:
        -:  108:        //draw 4
        -:  109:        for (i = 0; i < 4; i++)
        -:  110:        {
        -:  111:            //minoinEffect() bug 2
        -:  112:            gainCard(estate, state, 2, currentPlayer);
        -:  113:            //drawCard(currentPlayer, state);
        -:  114:        }
        -:  115:
        -:  116:        //other players discard hand and redraw if hand size > 4
        -:  117:        for (i = 0; i < state->numPlayers; i++)
        -:  118:        {
        -:  119:            if (i != currentPlayer)
        -:  120:            {
        -:  121:                //minionEffect() bug 1
        -:  122:                if (state->handCount[i] > 5)
        -:  123:                // if ( state->handCount[i] > 4 )
        -:  124:                {
        -:  125:                    //discard hand
        -:  126:                    while (state->handCount[i] > 0)
        -:  127:                    {
        -:  128:                        discardCard(handPos, i, state, 0);
        -:  129:                    }
        -:  130:
        -:  131:                    //draw 4
        -:  132:                    for (j = 0; j < 4; j++)
        -:  133:                    {
        -:  134:                        drawCard(i, state);
        -:  135:                    }
        -:  136:                }
        -:  137:            }
        -:  138:        }
        -:  139:    }
        -:  140:}*/
