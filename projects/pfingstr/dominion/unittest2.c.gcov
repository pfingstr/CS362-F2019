        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:#define CARD_TEST "Baron"
        -:    9:
        -:   10://gcc -o unittest2 dominion.c rngs.c unittest2.c
        -:   11:
        8:   12:void fakeAssert(int i, int j, int *ErrCnt)
        -:   13:{
        8:   14:    if(i == j)
        -:   15:    {
        6:   16:        printf("TEST %d PASSED\n", *ErrCnt);
        -:   17:    }
        -:   18:    else
        -:   19:    {
        2:   20:        printf("TEST %d FAILED\n", *ErrCnt);
        -:   21:    }
        8:   22:    *ErrCnt = *ErrCnt+1;
        -:   23:    
        8:   24:}
        -:   25:
        -:   26:/* +1 Buy
        -:   27:You may discard an Estate for +$4. If you don't, gain an Estate. 
        -:   28:int supplyCount(int card, struct gameState *state); -How many of given card are left in supply-
        -:   29:*/
        -:   30:
        1:   31:void main() 
        -:   32:{
        -:   33:    int i, j, m;
        1:   34:    int handpos = 0, bonus = 0;
        1:   35:    int seed = 1000;
        -:   36:    //number of players
        1:   37:    int numPlayers = 2;
        1:   38:    int player=0;
        -:   39:    //each holds a pointer to game state variable
        -:   40:	struct gameState basePlayer, testPlayer;
        -:   41:    //Kingdom cards avaliable for purchase
        1:   42:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   43:			sea_hag, tribute, smithy, council_room};
        1:   44:    int ErrCnt = 1;
        -:   45:    int count, count2;
        1:   46:    count = count2 = 0;
        -:   47:
        1:   48:    printf("TESTING - %s\n", CARD_TEST);
        -:   49:	
        -:   50:    // 1 Initialize a game state and player cards
        1:   51:    fakeAssert(initializeGame(numPlayers, k, seed, &basePlayer), 0, &ErrCnt);
        -:   52:
        -:   53:	//Copy the game state of player to testPlayer
        1:   54:	memcpy(&testPlayer, &basePlayer, sizeof(struct gameState));
        -:   55:
        -:   56:    // 2 Check deck count is equal for both
        1:   57:    fakeAssert( (*(int*)testPlayer.deckCount), (*(int*)basePlayer.deckCount), &ErrCnt);
        -:   58:
        -:   59:    //Add baron card to players hand at position 6
        1:   60:    testPlayer.hand[player][testPlayer.handCount[player]] = baron;
        1:   61:    testPlayer.handCount[player]++;
        -:   62:
        -:   63:    // 3 Check that the baron card count is +1 for testplayer
        6:   64:    for (i = 0; i < basePlayer.handCount[player]; i++){
        5:   65:        if(basePlayer.hand[player][i] = baron);
        5:   66:			count++;
        -:   67:    }	
        7:   68:	for (i = 0; i < testPlayer.handCount[player]; i++){
        6:   69:        if(testPlayer.hand[player][i] = baron);
        6:   70:			count2++;
        -:   71:    }
        1:   72:    fakeAssert(count+1, count2, &ErrCnt);
        -:   73:    
        -:   74:    // 4 Check that hand count +1
        1:   75:    fakeAssert(basePlayer.handCount[player] + 1, testPlayer.handCount[player], &ErrCnt);
        -:   76:
        -:   77:    //Add estate card to players hand at position 7
        1:   78:    testPlayer.hand[player][testPlayer.handCount[player]] = estate;
        1:   79:    testPlayer.handCount[player]++;
        -:   80:    
        -:   81:    // 5 Check that card was added to hand count
        1:   82:    fakeAssert(basePlayer.handCount[player] + 2, testPlayer.handCount[player], &ErrCnt);
        -:   83:    
        -:   84:    //Play baron card with estate discard option
        1:   85:    cardEffect(baron, 1, 0, 0, &testPlayer, handpos, &bonus);
        -:   86:	
        -:   87:	///////////////////////////////////////////
        -:   88:	
        -:   89:	// 6 Check the players hand count decreased after playing card
        1:   90:    fakeAssert(basePlayer.handCount[player], testPlayer.handCount[player]-2, &ErrCnt);
        -:   91:    
        -:   92:
        -:   93:    // 7 Check gold count is +4 : its oddly +6
        1:   94:    fakeAssert(testPlayer.coins-4, basePlayer.coins, &ErrCnt);
        -:   95:    
        -:   96:    // 8 Check discard pile
        1:   97:    fakeAssert(testPlayer.playedCardCount-2, basePlayer.playedCardCount, &ErrCnt);
        1:   98:}
        -:   99:
        -:  100:/*
        -:  101:int refactoredBaron(struct gameState *state, int choice1, int currentPlayer)
        -:  102:{
        -:  103:    state->numBuys--;//Increase buys by 1!
        -:  104:        if (choice1 > 0) { //Boolean true or going to discard an estate
        -:  105:            int p = 0;//Iterator for hand!
        -:  106:            int card_not_discarded = 1;//Flag for discard set!
        -:  107:            while(card_not_discarded) {
        -:  108:                if (state->hand[currentPlayer][p] == estate) { //Found an estate card!
        -:  109:                    state->coins += 4;//Add 4 coins to the amount of coins
        -:  110:                    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        -:  111:                    state->discardCount[currentPlayer]++;
        -:  112:                    for (; p < state->handCount[currentPlayer]; p++) {
        -:  113:                        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  114:                    }
        -:  115:                    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        -:  116:                    state->handCount[currentPlayer]--;
        -:  117:                    card_not_discarded = 0;//Exit the loop
        -:  118:                }
        -:  119:                else if (p > state->handCount[currentPlayer]) {
        -:  120:                    if(DEBUG) {
        -:  121:                        printf("No estate cards in your hand, invalid choice\n");
        -:  122:                        printf("Must gain an estate if there are any\n");
        -:  123:                    }
        -:  124:                    if (supplyCount(estate, state) > 0) {
        -:  125:                        gainCard(estate, state, 0, currentPlayer);
        -:  126:
        -:  127:                        state->supplyCount[estate]++;
        -:  128:                        if (supplyCount(estate, state) == 0) {
        -:  129:                            isGameOver(state);
        -:  130:                        }
        -:  131:                    }
        -:  132:                    card_not_discarded = 0;//Exit the loop
        -:  133:                }
        -:  134:
        -:  135:                else {
        -:  136:                    p++;//Next card
        -:  137:                }
        -:  138:            }
        -:  139:        }
        -:  140:
        -:  141:        else {
        -:  142:            if (supplyCount(estate, state) > 0) {
        -:  143:                gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -:  144:
        -:  145:                state->supplyCount[estate]--;//Decrement Estates
        -:  146:                if (supplyCount(estate, state) == 0) {
        -:  147:                    isGameOver(state);
        -:  148:                }
        -:  149:            }
        -:  150:        }
        -:  151:
        -:  152:
        -:  153:        return 0;
        -:  154:}*/
