        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include <math.h>
        -:    9:#define CARD_TEST "Minion"
        -:   10:
        -:   11://gcc -o unittest4 dominion.c rngs.c unittest4.c
        -:   12:
function fakeAssert called 44 returned 100% blocks executed 100%
       44:   13:void fakeAssert(int i, int j, int *ErrCnt)
        -:   14:{
       44:   15:    if(i == j)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
        -:   16:    {
       28:   17:        printf("TEST %d PASSED\n", *ErrCnt);
call    0 returned 100%
        -:   18:    }
        -:   19:    else
        -:   20:    {
       16:   21:        printf("TEST %d FAILED\n", *ErrCnt);
call    0 returned 100%
        -:   22:    }
       44:   23:    *ErrCnt = *ErrCnt+1;
        -:   24:    
       44:   25:}
        -:   26:
function main called 4 returned 100% blocks executed 100%
        4:   27:void main() 
        -:   28:{
        -:   29:    int i;
        4:   30:    int handpos = 0, bonus = 0;
        4:   31:    int seed = 1000;
        -:   32:    //number of players
        4:   33:    int numPlayers = 2;
        4:   34:    int player=0;
        -:   35:    //each holds a pointer to game state variable
        -:   36:	struct gameState basePlayer, testPlayer;
        -:   37:    //Kingdom cards avaliable for purchase
        4:   38:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   39:			sea_hag, tribute, smithy, council_room};
        4:   40:    int ErrCnt = 1;
        -:   41:    int count, count2;
        4:   42:    count = count2 = 0;
        -:   43:
        -:   44:
        -:   45:
        4:   46:    printf("TESTING - %s\n", CARD_TEST);
call    0 returned 100%
        -:   47:	
        -:   48:    // 1 Initialize a game state and player cards
        4:   49:    fakeAssert(initializeGame(numPlayers, k, seed, &basePlayer), 0, &ErrCnt);
call    0 returned 100%
call    1 returned 100%
        -:   50:
        -:   51:	//Copy the game state of player to testPlayer
        4:   52:	memcpy(&testPlayer, &basePlayer, sizeof(struct gameState));
        -:   53:
        -:   54:    // 2 Check deck count is equal for both
        4:   55:    fakeAssert( (*(int*)testPlayer.deckCount), (*(int*)basePlayer.deckCount), &ErrCnt);
call    0 returned 100%
        -:   56:
        -:   57:    //Add minion card to players hand at position 6
        4:   58:    testPlayer.hand[player][testPlayer.handCount[player]] = minion;
        4:   59:    testPlayer.handCount[player]++;
        -:   60:
        -:   61:    // 3 Check that the minion card count is +1 for testplayer
       24:   62:    for (i = 0; i < basePlayer.handCount[player]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       20:   63:        if(basePlayer.hand[player][i] = minion);
       20:   64:			count++;
        -:   65:    }
        -:   66:		
       28:   67:	for (i = 0; i < testPlayer.handCount[player]; i++){
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
       24:   68:        if(testPlayer.hand[player][i] = minion);
       24:   69:			count2++;
        -:   70:    }
        4:   71:    fakeAssert(count+1, count2, &ErrCnt);
call    0 returned 100%
        -:   72:    
        -:   73:    // 4 Check hand count +1
        4:   74:    fakeAssert(basePlayer.handCount[player] + 1, testPlayer.handCount[player], &ErrCnt);
call    0 returned 100%
        -:   75:    
        -:   76:    //Play minion card with +2 Gold option.
        4:   77:    cardEffect(minion, 1, 0, 0, &testPlayer, handpos, &bonus);
call    0 returned 100%
        -:   78:	
        -:   79:	
        -:   80:    /*Choose one: +$2; or discard your hand, +4 Cards, 
        -:   81:    and each other player with at least 5 cards in 
        -:   82:    hand discards their hand and draws 4 cards. 
        -:   83:    
        -:   84:    
        -:   85:    */
        -:   86:	
        -:   87:	// 5 Check the players hand count decreased after playing card
        4:   88:    fakeAssert(basePlayer.handCount[player], testPlayer.handCount[player]-1, &ErrCnt);
call    0 returned 100%
        -:   89:    
        -:   90:    // 6 Check gold count option
        4:   91:    fakeAssert(testPlayer.coins-2, basePlayer.coins, &ErrCnt);
call    0 returned 100%
        -:   92:
        -:   93:    // 7 Check num action +1 for test player
        4:   94:    fakeAssert(testPlayer.numActions+1, basePlayer.numActions, &ErrCnt);
call    0 returned 100%
        -:   95:    
        -:   96:    //Reinitilize game
        4:   97:    initializeGame(numPlayers, k, seed, &basePlayer);
call    0 returned 100%
        4:   98:    memcpy(&testPlayer, &basePlayer, sizeof(struct gameState));
        -:   99:    
        -:  100:    // 8 Add minion card to players hand and check hand count
        4:  101:    testPlayer.hand[player][testPlayer.handCount[player]] = minion;
        4:  102:    testPlayer.handCount[player]++;
        4:  103:    fakeAssert(basePlayer.handCount[player] + 1, testPlayer.handCount[player], &ErrCnt);
call    0 returned 100%
        -:  104:
        -:  105:    //Play minion card with second option
        4:  106:	cardEffect(minion, 0, 1, 0, &testPlayer, handpos, &bonus);
call    0 returned 100%
        -:  107:    
        -:  108:    // 9 Hand count should equal 5 based on bug introduced
        4:  109:    fakeAssert(5, testPlayer.handCount[player], &ErrCnt);
call    0 returned 100%
        -:  110:    // 10 Hand count should equal 5 based on bug introduced
        4:  111:    fakeAssert(5, basePlayer.handCount[player], &ErrCnt);
call    0 returned 100%
        -:  112:    
        -:  113:    // 11 Check dicsard count
        4:  114:    fakeAssert(testPlayer.discardCount[player], basePlayer.discardCount[player], &ErrCnt);
call    0 returned 100%
        -:  115:
        -:  116:
        4:  117:}
        -:  118:
        -:  119:
