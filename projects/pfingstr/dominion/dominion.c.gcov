        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:15
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <tgmath.h> 
        -:    8:
    54080:    9:int compare(const void* a, const void* b) {
    54080:   10:    if (*(int*)a > *(int*)b)
     5995:   11:        return 1;
    48085:   12:    if (*(int*)a < *(int*)b)
     7750:   13:        return -1;
    40335:   14:    return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState* newGame() {
    #####:   18:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:    return g;
        -:   20:}
        -:   21:
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:                  int k8, int k9, int k10) {
    #####:   24:    int* k = malloc(10 * sizeof(int));
    #####:   25:    k[0] = k1;
    #####:   26:    k[1] = k2;
    #####:   27:    k[2] = k3;
    #####:   28:    k[3] = k4;
    #####:   29:    k[4] = k5;
    #####:   30:    k[5] = k6;
    #####:   31:    k[6] = k7;
    #####:   32:    k[7] = k8;
    #####:   33:    k[8] = k9;
    #####:   34:    k[9] = k10;
    #####:   35:    return k;
        -:   36:}
        -:   37:
     1500:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:                   struct gameState *state) {
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;
        -:   43:
        -:   44:    //set up random number generator
     1500:   45:    SelectStream(1);
     1500:   46:    PutSeed((long)randomSeed);
        -:   47:
        -:   48:    //check number of players
     1500:   49:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:    {
      765:   51:        return -1;
        -:   52:    }
        -:   53:
        -:   54:    //set number of players
      735:   55:    state->numPlayers = numPlayers;
        -:   56:
        -:   57:    //check selected kingdom cards are different
     8085:   58:    for (i = 0; i < 10; i++)
        -:   59:    {
    80850:   60:        for (j = 0; j < 10; j++)
        -:   61:        {
    73500:   62:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:            {
    #####:   64:                return -1;
        -:   65:            }
        -:   66:        }
        -:   67:    }
        -:   68:
        -:   69:
        -:   70:    //initialize supply
        -:   71:    ///////////////////////////////
        -:   72:
        -:   73:    //set number of Curse cards
      735:   74:    if (numPlayers == 2)
        -:   75:    {
      385:   76:        state->supplyCount[curse] = 10;
        -:   77:    }
      350:   78:    else if (numPlayers == 3)
        -:   79:    {
      350:   80:        state->supplyCount[curse] = 20;
        -:   81:    }
        -:   82:    else
        -:   83:    {
    #####:   84:        state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:    //set number of Victory cards
      735:   88:    if (numPlayers == 2)
        -:   89:    {
      385:   90:        state->supplyCount[estate] = 8;
      385:   91:        state->supplyCount[duchy] = 8;
      385:   92:        state->supplyCount[province] = 8;
        -:   93:    }
        -:   94:    else
        -:   95:    {
      350:   96:        state->supplyCount[estate] = 12;
      350:   97:        state->supplyCount[duchy] = 12;
      350:   98:        state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:    //set number of Treasure cards
      735:  102:    state->supplyCount[copper] = 60 - (7 * numPlayers);
      735:  103:    state->supplyCount[silver] = 40;
      735:  104:    state->supplyCount[gold] = 30;
        -:  105:
        -:  106:    //set number of Kingdom cards
    15435:  107:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:    {
   121275:  109:        for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:        {
   113925:  111:            if (kingdomCards[j] == i)
        -:  112:            {
        -:  113:                //check if card is a 'Victory' Kingdom card
     7350:  114:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:                {
     2940:  116:                    if (numPlayers == 2) {
      770:  117:                        state->supplyCount[i] = 8;
        -:  118:                    }
        -:  119:                    else {
      700:  120:                        state->supplyCount[i] = 12;
        -:  121:                    }
        -:  122:                }
        -:  123:                else
        -:  124:                {
     5880:  125:                    state->supplyCount[i] = 10;
        -:  126:                }
     7350:  127:                break;
        -:  128:            }
        -:  129:            else    //card is not in the set choosen for the game
        -:  130:            {
   106575:  131:                state->supplyCount[i] = -1;
        -:  132:            }
        -:  133:        }
        -:  134:
        -:  135:    }
        -:  136:
        -:  137:    ////////////////////////
        -:  138:    //supply intilization complete
        -:  139:
        -:  140:    //set player decks
     2555:  141:    for (i = 0; i < numPlayers; i++)
        -:  142:    {
     1820:  143:        state->deckCount[i] = 0;
     7280:  144:        for (j = 0; j < 3; j++)
        -:  145:        {
     5460:  146:            state->deck[i][j] = estate;
     5460:  147:            state->deckCount[i]++;
        -:  148:        }
    14560:  149:        for (j = 3; j < 10; j++)
        -:  150:        {
    12740:  151:            state->deck[i][j] = copper;
    12740:  152:            state->deckCount[i]++;
        -:  153:        }
        -:  154:    }
        -:  155:
        -:  156:    //shuffle player decks
     2555:  157:    for (i = 0; i < numPlayers; i++)
        -:  158:    {
     1820:  159:        if ( shuffle(i, state) < 0 )
        -:  160:        {
    #####:  161:            return -1;
        -:  162:        }
        -:  163:    }
        -:  164:
        -:  165:    //draw player hands
     2555:  166:    for (i = 0; i < numPlayers; i++)
        -:  167:    {
        -:  168:        //initialize hand size to zero
     1820:  169:        state->handCount[i] = 0;
     1820:  170:        state->discardCount[i] = 0;
        -:  171:        //draw 5 cards
        -:  172:        // for (j = 0; j < 5; j++)
        -:  173:        //	{
        -:  174:        //	  drawCard(i, state);
        -:  175:        //	}
        -:  176:    }
        -:  177:
        -:  178:    //set embargo tokens to 0 for all supply piles
    20580:  179:    for (i = 0; i <= treasure_map; i++)
        -:  180:    {
    19845:  181:        state->embargoTokens[i] = 0;
        -:  182:    }
        -:  183:
        -:  184:    //initialize first player's turn
      735:  185:    state->outpostPlayed = 0;
      735:  186:    state->phase = 0;
      735:  187:    state->numActions = 1;
      735:  188:    state->numBuys = 1;
      735:  189:    state->playedCardCount = 0;
      735:  190:    state->whoseTurn = 0;
      735:  191:    state->handCount[state->whoseTurn] = 0;
        -:  192:    //int it; move to top
        -:  193:
        -:  194:    //Moved draw cards to here, only drawing at the start of a turn
     4410:  195:    for (it = 0; it < 5; it++) {
     3675:  196:        drawCard(state->whoseTurn, state);
        -:  197:    }
        -:  198:
      735:  199:    updateCoins(state->whoseTurn, state, 0);
        -:  200:
      735:  201:    return 0;
        -:  202:}
        -:  203:
    20810:  204:int shuffle(int player, struct gameState *state) {
        -:  205:
        -:  206:
        -:  207:    int newDeck[MAX_DECK];
    20810:  208:    int newDeckPos = 0;
        -:  209:    int card;
        -:  210:    int i;
        -:  211:
    20810:  212:    if (state->deckCount[player] < 1)
    18365:  213:        return -1;
     2445:  214:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  215:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  216:
    31900:  217:    while (state->deckCount[player] > 0) {
    27010:  218:        card = (Random() * state->deckCount[player]);
    27010:  219:        newDeck[newDeckPos] = state->deck[player][card];
    27010:  220:        newDeckPos++;
   188645:  221:        for (i = card; i < state->deckCount[player]-1; i++) {
   161635:  222:            state->deck[player][i] = state->deck[player][i+1];
        -:  223:        }
    27010:  224:        state->deckCount[player]--;
        -:  225:    }
    29455:  226:    for (i = 0; i < newDeckPos; i++) {
    27010:  227:        state->deck[player][i] = newDeck[i];
    27010:  228:        state->deckCount[player]++;
        -:  229:    }
        -:  230:
     2445:  231:    return 0;
        -:  232:}
        -:  233:
    #####:  234:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  235:{
        -:  236:    int card;
    #####:  237:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  238:
        -:  239:    //check if it is the right phase
    #####:  240:    if (state->phase != 0)
        -:  241:    {
    #####:  242:        return -1;
        -:  243:    }
        -:  244:
        -:  245:    //check if player has enough actions
    #####:  246:    if ( state->numActions < 1 )
        -:  247:    {
    #####:  248:        return -1;
        -:  249:    }
        -:  250:
        -:  251:    //get card played
    #####:  252:    card = handCard(handPos, state);
        -:  253:
        -:  254:    //check if selected card is an action
    #####:  255:    if ( card < adventurer || card > treasure_map )
        -:  256:    {
    #####:  257:        return -1;
        -:  258:    }
        -:  259:
        -:  260:    //play card
    #####:  261:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  262:    {
    #####:  263:        return -1;
        -:  264:    }
        -:  265:
        -:  266:    //reduce number of actions
    #####:  267:    state->numActions--;
        -:  268:
        -:  269:    //update coins (Treasure cards may be added with card draws)
    #####:  270:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  271:
    #####:  272:    return 0;
        -:  273:}
        -:  274:
    #####:  275:int buyCard(int supplyPos, struct gameState *state) {
        -:  276:    int who;
        -:  277:    if (DEBUG) {
        -:  278:        printf("Entering buyCard...\n");
        -:  279:    }
        -:  280:
        -:  281:    // I don't know what to do about the phase thing.
        -:  282:
    #####:  283:    who = state->whoseTurn;
        -:  284:
    #####:  285:    if (state->numBuys < 1) {
        -:  286:        if (DEBUG)
        -:  287:            printf("You do not have any buys left\n");
    #####:  288:        return -1;
    #####:  289:    } else if (supplyCount(supplyPos, state) <1) {
        -:  290:        if (DEBUG)
        -:  291:            printf("There are not any of that type of card left\n");
    #####:  292:        return -1;
    #####:  293:    } else if (state->coins < getCost(supplyPos)) {
        -:  294:        if (DEBUG)
        -:  295:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  296:        return -1;
        -:  297:    } else {
    #####:  298:        state->phase=1;
        -:  299:        //state->supplyCount[supplyPos]--;
    #####:  300:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  301:
    #####:  302:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  303:        state->numBuys--;
        -:  304:        if (DEBUG)
        -:  305:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  306:    }
        -:  307:
        -:  308:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  309:    //state->discardCount[who]++;
        -:  310:
    #####:  311:    return 0;
        -:  312:}
        -:  313:
    #####:  314:int numHandCards(struct gameState *state) {
    #####:  315:    return state->handCount[ whoseTurn(state) ];
        -:  316:}
        -:  317:
    #####:  318:int handCard(int handPos, struct gameState *state) {
    #####:  319:    int currentPlayer = whoseTurn(state);
    #####:  320:    return state->hand[currentPlayer][handPos];
        -:  321:}
        -:  322:
     1460:  323:int supplyCount(int card, struct gameState *state) {
     1460:  324:    return state->supplyCount[card];
        -:  325:}
        -:  326:
    #####:  327:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  328:    int i;
    #####:  329:    int count = 0;
        -:  330:
    #####:  331:    for (i = 0; i < state->deckCount[player]; i++)
        -:  332:    {
    #####:  333:        if (state->deck[player][i] == card) count++;
        -:  334:    }
        -:  335:
    #####:  336:    for (i = 0; i < state->handCount[player]; i++)
        -:  337:    {
    #####:  338:        if (state->hand[player][i] == card) count++;
        -:  339:    }
        -:  340:
    #####:  341:    for (i = 0; i < state->discardCount[player]; i++)
        -:  342:    {
    #####:  343:        if (state->discard[player][i] == card) count++;
        -:  344:    }
        -:  345:
    #####:  346:    return count;
        -:  347:}
        -:  348:
     1500:  349:int whoseTurn(struct gameState *state) {
     1500:  350:    return state->whoseTurn;
        -:  351:}
        -:  352:
    #####:  353:int endTurn(struct gameState *state) {
        -:  354:    int k;
        -:  355:    int i;
    #####:  356:    int currentPlayer = whoseTurn(state);
        -:  357:
        -:  358:    //Discard hand
    #####:  359:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  360:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  361:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  362:    }
    #####:  363:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  364:
        -:  365:    //Code for determining the player
    #####:  366:    if (currentPlayer < (state->numPlayers - 1)) {
    #####:  367:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  368:    }
        -:  369:    else {
    #####:  370:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  371:    }
        -:  372:
    #####:  373:    state->outpostPlayed = 0;
    #####:  374:    state->phase = 0;
    #####:  375:    state->numActions = 1;
    #####:  376:    state->coins = 0;
    #####:  377:    state->numBuys = 1;
    #####:  378:    state->playedCardCount = 0;
    #####:  379:    state->handCount[state->whoseTurn] = 0;
        -:  380:
        -:  381:    //int k; move to top
        -:  382:    //Next player draws hand
    #####:  383:    for (k = 0; k < 5; k++) {
    #####:  384:        drawCard(state->whoseTurn, state);//Draw a card
        -:  385:    }
        -:  386:
        -:  387:    //Update money
    #####:  388:    updateCoins(state->whoseTurn, state, 0);
        -:  389:
    #####:  390:    return 0;
        -:  391:}
        -:  392:
       35:  393:int isGameOver(struct gameState *state) {
        -:  394:    int i;
        -:  395:    int j;
        -:  396:
        -:  397:    //if stack of Province cards is empty, the game ends
       35:  398:    if (state->supplyCount[province] == 0)
        -:  399:    {
        1:  400:        return 1;
        -:  401:    }
        -:  402:
        -:  403:    //if three supply pile are at 0, the game ends
       34:  404:    j = 0;
      884:  405:    for (i = 0; i < 25; i++)
        -:  406:    {
      850:  407:        if (state->supplyCount[i] == 0)
        -:  408:        {
       34:  409:            j++;
        -:  410:        }
        -:  411:    }
       34:  412:    if ( j >= 3)
        -:  413:    {
    #####:  414:        return 1;
        -:  415:    }
        -:  416:
       34:  417:    return 0;
        -:  418:}
        -:  419:
    #####:  420:int scoreFor (int player, struct gameState *state) {
        -:  421:
        -:  422:    int i;
    #####:  423:    int score = 0;
        -:  424:    //score from hand
    #####:  425:    for (i = 0; i < state->handCount[player]; i++)
        -:  426:    {
    #####:  427:        if (state->hand[player][i] == curse) {
    #####:  428:            score = score - 1;
        -:  429:        };
    #####:  430:        if (state->hand[player][i] == estate) {
    #####:  431:            score = score + 1;
        -:  432:        };
    #####:  433:        if (state->hand[player][i] == duchy) {
    #####:  434:            score = score + 3;
        -:  435:        };
    #####:  436:        if (state->hand[player][i] == province) {
    #####:  437:            score = score + 6;
        -:  438:        };
    #####:  439:        if (state->hand[player][i] == great_hall) {
    #####:  440:            score = score + 1;
        -:  441:        };
    #####:  442:        if (state->hand[player][i] == gardens) {
    #####:  443:            score = score + ( fullDeckCount(player, 0, state) / 10 );
        -:  444:        };
        -:  445:    }
        -:  446:
        -:  447:    //score from discard
    #####:  448:    for (i = 0; i < state->discardCount[player]; i++)
        -:  449:    {
    #####:  450:        if (state->discard[player][i] == curse) {
    #####:  451:            score = score - 1;
        -:  452:        };
    #####:  453:        if (state->discard[player][i] == estate) {
    #####:  454:            score = score + 1;
        -:  455:        };
    #####:  456:        if (state->discard[player][i] == duchy) {
    #####:  457:            score = score + 3;
        -:  458:        };
    #####:  459:        if (state->discard[player][i] == province) {
    #####:  460:            score = score + 6;
        -:  461:        };
    #####:  462:        if (state->discard[player][i] == great_hall) {
    #####:  463:            score = score + 1;
        -:  464:        };
    #####:  465:        if (state->discard[player][i] == gardens) {
    #####:  466:            score = score + ( fullDeckCount(player, 0, state) / 10 );
        -:  467:        };
        -:  468:    }
        -:  469:
        -:  470:    //score from deck
    #####:  471:    for (i = 0; i < state->discardCount[player]; i++)
        -:  472:    {
    #####:  473:        if (state->deck[player][i] == curse) {
    #####:  474:            score = score - 1;
        -:  475:        };
    #####:  476:        if (state->deck[player][i] == estate) {
    #####:  477:            score = score + 1;
        -:  478:        };
    #####:  479:        if (state->deck[player][i] == duchy) {
    #####:  480:            score = score + 3;
        -:  481:        };
    #####:  482:        if (state->deck[player][i] == province) {
    #####:  483:            score = score + 6;
        -:  484:        };
    #####:  485:        if (state->deck[player][i] == great_hall) {
    #####:  486:            score = score + 1;
        -:  487:        };
    #####:  488:        if (state->deck[player][i] == gardens) {
    #####:  489:            score = score + ( fullDeckCount(player, 0, state) / 10 );
        -:  490:        };
        -:  491:    }
        -:  492:
    #####:  493:    return score;
        -:  494:}
        -:  495:
    #####:  496:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  497:    int i;
        -:  498:    int j;
        -:  499:    int highScore;
        -:  500:    int currentPlayer;
        -:  501:
        -:  502:    //get score for each player
    #####:  503:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  504:    {
        -:  505:        //set unused player scores to -9999
    #####:  506:        if (i >= state->numPlayers)
        -:  507:        {
    #####:  508:            players[i] = -9999;
        -:  509:        }
        -:  510:        else
        -:  511:        {
    #####:  512:            players[i] = scoreFor (i, state);
        -:  513:        }
        -:  514:    }
        -:  515:
        -:  516:    //find highest score
    #####:  517:    j = 0;
    #####:  518:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  519:    {
    #####:  520:        if (players[i] > players[j])
        -:  521:        {
    #####:  522:            j = i;
        -:  523:        }
        -:  524:    }
    #####:  525:    highScore = players[j];
        -:  526:
        -:  527:    //add 1 to players who had less turns
    #####:  528:    currentPlayer = whoseTurn(state);
    #####:  529:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  530:    {
    #####:  531:        if ( players[i] == highScore && i > currentPlayer )
        -:  532:        {
    #####:  533:            players[i]++;
        -:  534:        }
        -:  535:    }
        -:  536:
        -:  537:    //find new highest score
    #####:  538:    j = 0;
    #####:  539:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  540:    {
    #####:  541:        if ( players[i] > players[j] )
        -:  542:        {
    #####:  543:            j = i;
        -:  544:        }
        -:  545:    }
    #####:  546:    highScore = players[j];
        -:  547:
        -:  548:    //set winners in array to 1 and rest to 0
    #####:  549:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  550:    {
    #####:  551:        if ( players[i] == highScore )
        -:  552:        {
    #####:  553:            players[i] = 1;
        -:  554:        }
        -:  555:        else
        -:  556:        {
    #####:  557:            players[i] = 0;
        -:  558:        }
        -:  559:    }
        -:  560:
    #####:  561:    return 0;
        -:  562:}
        -:  563:
    24550:  564:int drawCard(int player, struct gameState *state)
        -:  565:{   int count;
        -:  566:    int deckCounter;
    24550:  567:    if (state->deckCount[player] <= 0) { //Deck is empty
        -:  568:
        -:  569:        //Step 1 Shuffle the discard pile back into a deck
        -:  570:        int i;
        -:  571:        //Move discard to deck
    18405:  572:        for (i = 0; i < state->discardCount[player]; i++) {
     8810:  573:            state->deck[player][i] = state->discard[player][i];
     8810:  574:            state->discard[player][i] = -1;
        -:  575:        }
        -:  576:
     9595:  577:        state->deckCount[player] = state->discardCount[player];
     9595:  578:        state->discardCount[player] = 0;//Reset discard
        -:  579:
        -:  580:        //Shufffle the deck
     9595:  581:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  582:
        -:  583:        if (DEBUG) { //Debug statements
        -:  584:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  585:        }
        -:  586:
     9595:  587:        state->discardCount[player] = 0;
        -:  588:
        -:  589:        //Step 2 Draw Card
     9595:  590:        count = state->handCount[player];//Get current player's hand count
        -:  591:
        -:  592:        if (DEBUG) { //Debug statements
        -:  593:            printf("Current hand count: %d\n", count);
        -:  594:        }
        -:  595:
     9595:  596:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  597:
     9595:  598:        if (deckCounter == 0)
     8970:  599:            return -1;
        -:  600:
      625:  601:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      625:  602:        state->deckCount[player]--;
      625:  603:        state->handCount[player]++;//Increment hand count
        -:  604:    }
        -:  605:
        -:  606:    else {
    14955:  607:        int count = state->handCount[player];//Get current hand count for player
        -:  608:        int deckCounter;
        -:  609:        if (DEBUG) { //Debug statements
        -:  610:            printf("Current hand count: %d\n", count);
        -:  611:        }
        -:  612:
    14955:  613:        deckCounter = state->deckCount[player];//Create holder for the deck count
    14955:  614:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    14955:  615:        state->deckCount[player]--;
    14955:  616:        state->handCount[player]++;//Increment hand count
        -:  617:    }
        -:  618:
    15580:  619:    return 0;
        -:  620:}
        -:  621:
      400:  622:int getCost(int cardNumber)
        -:  623:{
      400:  624:    switch( cardNumber )
        -:  625:    {
      200:  626:    case curse:
      200:  627:        return 0;
    #####:  628:    case estate:
    #####:  629:        return 2;
    #####:  630:    case duchy:
    #####:  631:        return 5;
    #####:  632:    case province:
    #####:  633:        return 8;
      200:  634:    case copper:
      200:  635:        return 0;
    #####:  636:    case silver:
    #####:  637:        return 3;
    #####:  638:    case gold:
    #####:  639:        return 6;
    #####:  640:    case adventurer:
    #####:  641:        return 6;
    #####:  642:    case council_room:
    #####:  643:        return 5;
    #####:  644:    case feast:
    #####:  645:        return 4;
    #####:  646:    case gardens:
    #####:  647:        return 4;
    #####:  648:    case mine:
    #####:  649:        return 5;
    #####:  650:    case remodel:
    #####:  651:        return 4;
    #####:  652:    case smithy:
    #####:  653:        return 4;
    #####:  654:    case village:
    #####:  655:        return 3;
    #####:  656:    case baron:
    #####:  657:        return 4;
    #####:  658:    case great_hall:
    #####:  659:        return 3;
    #####:  660:    case minion:
    #####:  661:        return 5;
    #####:  662:    case steward:
    #####:  663:        return 3;
    #####:  664:    case tribute:
    #####:  665:        return 5;
    #####:  666:    case ambassador:
    #####:  667:        return 3;
    #####:  668:    case cutpurse:
    #####:  669:        return 4;
    #####:  670:    case embargo:
    #####:  671:        return 2;
    #####:  672:    case outpost:
    #####:  673:        return 5;
    #####:  674:    case salvager:
    #####:  675:        return 4;
    #####:  676:    case sea_hag:
    #####:  677:        return 4;
    #####:  678:    case treasure_map:
    #####:  679:        return 4;
        -:  680:    }
        -:  681:
    #####:  682:    return -1;
        -:  683:}
        -:  684:
    #####:  685:int refactoredAmbassador(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:  686:{
        -:  687:        int i;
    #####:  688:        int j = 0;		//used to check if player has enough cards to discard
        -:  689:
    #####:  690:        if (choice1 > 2 || choice1 < 0)
        -:  691:        {
    #####:  692:            return -1;
        -:  693:        }
        -:  694:
    #####:  695:        if (choice1 == handPos)
        -:  696:        {
    #####:  697:            return -1;
        -:  698:        }
        -:  699:
    #####:  700:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  701:        {
    #####:  702:            if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  703:            {
    #####:  704:                j++;
        -:  705:            }
        -:  706:        }
    #####:  707:        if (j < choice2)
        -:  708:        {
    #####:  709:            return -1;
        -:  710:        }
        -:  711:
        -:  712:        if (DEBUG)
        -:  713:            printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  714:
        -:  715:        //increase supply count for choosen card by amount being discarded
        -:  716:        // state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  717:
        -:  718:        //each other player gains a copy of revealed card
    #####:  719:        for (i = 0; i < state->numPlayers; i++)
        -:  720:        {
    #####:  721:            if (i != currentPlayer)
        -:  722:            {
    #####:  723:                gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  724:            }
        -:  725:        }
        -:  726:
        -:  727:        //discard played card from hand
    #####:  728:        discardCard(handPos, currentPlayer, state, 0);
        -:  729:
        -:  730:        //trash copies of cards returned to supply
    #####:  731:        for (j = 0; j < choice2; j++)
        -:  732:        {
    #####:  733:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  734:            {
    #####:  735:                if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  736:                {
    #####:  737:                    discardCard(i, currentPlayer, state, 1);
    #####:  738:                    break;
        -:  739:                }
        -:  740:            }
        -:  741:        }
        -:  742:
    #####:  743:        return 0;
        -:  744:}
        -:  745:
      500:  746:int refactoredBaron(struct gameState *state, int choice1, int currentPlayer)
        -:  747:{
      500:  748:    state->numBuys++;//Increase buys by 1!
      500:  749:        if (choice1 > 0) { //Boolean true or going to discard an estate
    #####:  750:            int p = 0;//Iterator for hand!
    #####:  751:            int card_not_discarded = 1;//Flag for discard set!
    #####:  752:            while(card_not_discarded) {
    #####:  753:                if (state->hand[currentPlayer][p] == estate) { //Found an estate card!
    #####:  754:                    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  755:                    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  756:                    state->discardCount[currentPlayer]++;
    #####:  757:                    for (; p < state->handCount[currentPlayer]; p++) {
    #####:  758:                        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  759:                    }
    #####:  760:                    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  761:                    state->handCount[currentPlayer]--;
    #####:  762:                    card_not_discarded = 0;//Exit the loop
        -:  763:                }
    #####:  764:                else if (p > state->handCount[currentPlayer]) {
        -:  765:                    if(DEBUG) {
        -:  766:                        printf("No estate cards in your hand, invalid choice\n");
        -:  767:                        printf("Must gain an estate if there are any\n");
        -:  768:                    }
    #####:  769:                    if (supplyCount(estate, state) > 0) {
    #####:  770:                        gainCard(estate, state, 0, currentPlayer);
        -:  771:
    #####:  772:                        state->supplyCount[estate]++;
    #####:  773:                        if (supplyCount(estate, state) == 0) {
    #####:  774:                            isGameOver(state);
        -:  775:                        }
        -:  776:                    }
    #####:  777:                    card_not_discarded = 0;//Exit the loop
        -:  778:                }
        -:  779:
        -:  780:                else {
    #####:  781:                    p++;//Next card
        -:  782:                }
        -:  783:            }
        -:  784:        }
        -:  785:
        -:  786:        else {
      500:  787:            if (supplyCount(estate, state) > 0) {
      480:  788:                gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -:  789:
      480:  790:                state->supplyCount[estate]--;//Decrement Estates
      480:  791:                if (supplyCount(estate, state) == 0) {
       35:  792:                    isGameOver(state);
        -:  793:                }
        -:  794:            }
        -:  795:        }
        -:  796:
        -:  797:
      500:  798:        return 0;
        -:  799:}
        -:  800:
      500:  801:int refactoredMine(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:  802:{
        -:  803:    int i;
      500:  804:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  805:
      500:  806:        if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  807:        {
      300:  808:            return -1;
        -:  809:        }
        -:  810:
      200:  811:        if (choice2 > treasure_map || choice2 < curse)
        -:  812:        {
    #####:  813:            return -1;
        -:  814:        }
        -:  815:
      200:  816:        if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  817:        {
      200:  818:            return -1;
        -:  819:        }
        -:  820:
        -:  821:        //gainCard(choice2, state, 2, currentPlayer);
        -:  822:
        -:  823:        //discard card from hand
        -:  824:        //discardCard(handPos, currentPlayer, state, 0);
        -:  825:
        -:  826:        //discard trashed card
    #####:  827:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  828:        {
    #####:  829:            if (state->hand[currentPlayer][i] == j)
        -:  830:            {
    #####:  831:                discardCard(i, currentPlayer, state, 0);
    #####:  832:                break;
        -:  833:            }
        -:  834:        }
        -:  835:
    #####:  836:        return 0;
        -:  837:}
        -:  838:
     1000:  839:int refactoredMinion(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:  840:{
        -:  841:        int i, j;
        -:  842:        //+1 action
     1000:  843:        state->numActions++;
        -:  844:
        -:  845:        //discard card from hand
     1000:  846:        discardCard(handPos, currentPlayer, state, 0);
        -:  847:
     1000:  848:		if (choice1)
        -:  849:        {
      500:  850:            state->coins = state->coins + 2;
        -:  851:        }
      500:  852:        else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  853:        {
        -:  854:            //discard hand
    #####:  855:            while(numHandCards(state) > 0)
        -:  856:            {
    #####:  857:                discardCard(handPos, currentPlayer, state, 0);
        -:  858:            }
        -:  859:
        -:  860:            //draw 4
    #####:  861:            for (i = 0; i < 5; i++)
        -:  862:            {
    #####:  863:                drawCard(currentPlayer, state);
        -:  864:            }
        -:  865:
        -:  866:            //other players discard hand and redraw if hand size > 4
    #####:  867:            for (i = 0; i < state->numPlayers; i++)
        -:  868:            {
    #####:  869:                if (i != currentPlayer)
        -:  870:                {
    #####:  871:                    if ( state->handCount[i] > 4 )
        -:  872:                    {
        -:  873:                        //discard hand
    #####:  874:                        while( state->handCount[i] > 0 )
        -:  875:                        {
    #####:  876:                            discardCard(handPos, i, state, 0);
        -:  877:                        }
        -:  878:
        -:  879:                        //draw 4
    #####:  880:                        for (j = 0; j < 5; j++)
        -:  881:                        {
    #####:  882:                            drawCard(i, state);
        -:  883:                        }
        -:  884:                    }
        -:  885:                }
        -:  886:            }
        -:  887:
        -:  888:        }
     1000:  889:        return 0;
        -:  890:}
        -:  891:
     1500:  892:int refactoredTribute(struct gameState *state, int currentPlayer)
        -:  893:{
     1500:  894:        int tributeRevealedCards[2] = {-1, -1};
     1500:  895:        int nextPlayer = currentPlayer + 1;
        -:  896:        int i;
     1500:  897:        if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
      210:  898:            if (state->deckCount[nextPlayer] > 0) {
    #####:  899:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  900:                state->deckCount[nextPlayer]--;
        -:  901:            }
      210:  902:            else if (state->discardCount[nextPlayer] > 0) {
    #####:  903:                tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  904:                state->discardCount[nextPlayer]--;
        -:  905:            }
        -:  906:            else {
        -:  907:                //No Card to Reveal
        -:  908:                if (DEBUG) {
        -:  909:                    printf("No cards to reveal\n");
        -:  910:                }
        -:  911:            }
        -:  912:        }
        -:  913:
        -:  914:        else {
     1290:  915:            if (state->deckCount[nextPlayer] == 0) {
    #####:  916:                for (i = 0; i < state->discardCount[nextPlayer]; i++) {
    #####:  917:                    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  918:                    state->deckCount[nextPlayer]++;
    #####:  919:                    state->discard[nextPlayer][i] = -1;
    #####:  920:                    state->discardCount[nextPlayer]--;
        -:  921:                }
        -:  922:
        -:  923:                
        -:  924:            }
     1290:  925:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
     1290:  926:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
     1290:  927:            state->deckCount[nextPlayer]--;
     1290:  928:            tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
     1290:  929:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
     1290:  930:            state->deckCount[nextPlayer]--;
        -:  931:        }
        -:  932:
     1500:  933:        if (tributeRevealedCards[0] == tributeRevealedCards[1]) { //If we have a duplicate card, just drop one
      780:  934:            state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
      780:  935:            state->playedCardCount++;
      780:  936:            tributeRevealedCards[1] = -1;
        -:  937:        }
        -:  938:
     4500:  939:        for (i = 0; i <= 1; i ++) {
     3000:  940:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) { //Treasure cards
     1120:  941:                state->coins += 2;
        -:  942:            }
        -:  943:
     1880:  944:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
      695:  945:                drawCard(currentPlayer, state);
      695:  946:                drawCard(currentPlayer, state);
        -:  947:            }
        -:  948:            else { //Action Card
     1185:  949:                state->numActions = state->numActions + 2;
        -:  950:            }
        -:  951:        }
        -:  952:
     1500:  953:        return 0;
        -:  954:}
        -:  955:
     1500:  956:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  957:{
        -:  958:    int i;
        -:  959:    int j;
        -:  960:    int k;
        -:  961:    int x;
        -:  962:    int index;
     1500:  963:    int currentPlayer = whoseTurn(state);
     1500:  964:    int nextPlayer = currentPlayer + 1;
        -:  965:
        -:  966:    //int tributeRevealedCards[2] = {-1, -1};
        -:  967:    int temphand[MAX_HAND];// moved above the if statement
     1500:  968:    int drawntreasure=0;
        -:  969:    int cardDrawn;
     1500:  970:    int z = 0;// this is the counter for the temp hand
     1500:  971:    if (nextPlayer > (state->numPlayers - 1)) {
       53:  972:        nextPlayer = 0;
        -:  973:    }
        -:  974:
        -:  975:
        -:  976:    //uses switch to select card and perform actions
     1500:  977:    switch( card )
        -:  978:    {
    #####:  979:    case ambassador:
    #####:  980:    refactoredAmbassador(state, choice1, choice2, currentPlayer, handPos);
        -:  981:
      500:  982:    case baron:
      500:  983:        refactoredBaron(state, choice1, currentPlayer);
        -:  984:
      500:  985:    case mine:
      500:  986:        refactoredMine(state, choice1, choice2, currentPlayer, handPos);
        -:  987:
     1000:  988:    case minion:
     1000:  989:        refactoredMinion(state, choice1, choice2, currentPlayer, handPos);
        -:  990:
     1500:  991:    case tribute:
     1500:  992:        refactoredTribute(state, currentPlayer);
        -:  993:        
     1500:  994:    case adventurer:
    22485:  995:        while(drawntreasure<2) {
    19485:  996:            if (state->deckCount[currentPlayer] <1) { //if the deck is empty we need to shuffle discard and add to deck
     9395:  997:                shuffle(currentPlayer, state);
        -:  998:            }
    19485:  999:            drawCard(currentPlayer, state);
    19485: 1000:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    19485: 1001:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     3000: 1002:                drawntreasure++;
        -: 1003:            else {
    16485: 1004:                temphand[z]=cardDrawn;
    16485: 1005:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    16485: 1006:                z++;
        -: 1007:            }
        -: 1008:        }
    19485: 1009:        while(z-1>=0) {
    16485: 1010:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    16485: 1011:            z=z-1;
        -: 1012:        }
     1500: 1013:        return 0;
        -: 1014:
    #####: 1015:    case council_room:
        -: 1016:        //+4 Cards
    #####: 1017:        for (i = 0; i < 4; i++)
        -: 1018:        {
    #####: 1019:            drawCard(currentPlayer, state);
        -: 1020:        }
        -: 1021:
        -: 1022:        //+1 Buy
    #####: 1023:        state->numBuys++;
        -: 1024:
        -: 1025:        //Each other player draws a card
    #####: 1026:        for (i = 0; i < state->numPlayers; i++)
        -: 1027:        {
    #####: 1028:            if ( i != currentPlayer )
        -: 1029:            {
    #####: 1030:                drawCard(i, state);
        -: 1031:            }
        -: 1032:        }
        -: 1033:
        -: 1034:        //put played card in played card pile
    #####: 1035:        discardCard(handPos, currentPlayer, state, 0);
        -: 1036:
    #####: 1037:        return 0;
        -: 1038:
    #####: 1039:    case feast:
        -: 1040:        //gain card with cost up to 5
        -: 1041:        //Backup hand
    #####: 1042:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####: 1043:            temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1044:            state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1045:        }
        -: 1046:        //Backup hand
        -: 1047:
        -: 1048:        //Update Coins for Buy
    #####: 1049:        updateCoins(currentPlayer, state, 5);
    #####: 1050:        x = 1;//Condition to loop on
    #####: 1051:        while( x == 1) {//Buy one card
    #####: 1052:            if (supplyCount(choice1, state) <= 0) {
        -: 1053:                if (DEBUG)
        -: 1054:                    printf("None of that card left, sorry!\n");
        -: 1055:
        -: 1056:                if (DEBUG) {
        -: 1057:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1058:                }
        -: 1059:            }
    #####: 1060:            else if (state->coins < getCost(choice1)) {
    #####: 1061:                printf("That card is too expensive!\n");
        -: 1062:
        -: 1063:                if (DEBUG) {
        -: 1064:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1065:                }
        -: 1066:            }
        -: 1067:            else {
        -: 1068:
        -: 1069:                if (DEBUG) {
        -: 1070:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1071:                }
        -: 1072:
    #####: 1073:                gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1074:                x = 0;//No more buying cards
        -: 1075:
        -: 1076:                if (DEBUG) {
        -: 1077:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1078:                }
        -: 1079:
        -: 1080:            }
        -: 1081:        }
        -: 1082:
        -: 1083:        //Reset Hand
    #####: 1084:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####: 1085:            state->hand[currentPlayer][i] = temphand[i];
    #####: 1086:            temphand[i] = -1;
        -: 1087:        }
        -: 1088:        //Reset Hand
        -: 1089:
    #####: 1090:        return 0;
        -: 1091:
    #####: 1092:    case gardens:
    #####: 1093:        return -1;
        -: 1094:
        -: 1095:
    #####: 1096:    case remodel:
    #####: 1097:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1098:
    #####: 1099:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1100:        {
    #####: 1101:            return -1;
        -: 1102:        }
        -: 1103:
    #####: 1104:        gainCard(choice2, state, 0, currentPlayer);
        -: 1105:
        -: 1106:        //discard card from hand
    #####: 1107:        discardCard(handPos, currentPlayer, state, 0);
        -: 1108:
        -: 1109:        //discard trashed card
    #####: 1110:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1111:        {
    #####: 1112:            if (state->hand[currentPlayer][i] == j)
        -: 1113:            {
    #####: 1114:                discardCard(i, currentPlayer, state, 0);
    #####: 1115:                break;
        -: 1116:            }
        -: 1117:        }
        -: 1118:
        -: 1119:
    #####: 1120:        return 0;
        -: 1121:
    #####: 1122:    case smithy:
        -: 1123:        //+3 Cards
    #####: 1124:        for (i = 0; i < 3; i++)
        -: 1125:        {
    #####: 1126:            drawCard(currentPlayer, state);
        -: 1127:        }
        -: 1128:
        -: 1129:        //discard card from hand
    #####: 1130:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1131:        return 0;
        -: 1132:
    #####: 1133:    case village:
        -: 1134:        //+1 Card
    #####: 1135:        drawCard(currentPlayer, state);
        -: 1136:
        -: 1137:        //+2 Actions
    #####: 1138:        state->numActions = state->numActions + 2;
        -: 1139:
        -: 1140:        //discard played card from hand
    #####: 1141:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1142:        return 0;
        -: 1143:
        -: 1144:
    #####: 1145:    case great_hall:
        -: 1146:        //+1 Card
    #####: 1147:        drawCard(currentPlayer, state);
        -: 1148:
        -: 1149:        //+1 Actions
    #####: 1150:        state->numActions++;
        -: 1151:
        -: 1152:        //discard card from hand
    #####: 1153:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1154:        return 0;
        -: 1155:
        -: 1156:
    #####: 1157:    case steward:
    #####: 1158:        if (choice1 == 1)
        -: 1159:        {
        -: 1160:            //+2 cards
    #####: 1161:            drawCard(currentPlayer, state);
    #####: 1162:            drawCard(currentPlayer, state);
        -: 1163:        }
    #####: 1164:        else if (choice1 == 2)
        -: 1165:        {
        -: 1166:            //+2 coins
    #####: 1167:            state->coins = state->coins + 2;
        -: 1168:        }
        -: 1169:        else
        -: 1170:        {
        -: 1171:            //trash 2 cards in hand
    #####: 1172:            discardCard(choice2, currentPlayer, state, 1);
    #####: 1173:            discardCard(choice3, currentPlayer, state, 1);
        -: 1174:        }
        -: 1175:
        -: 1176:        //discard card from hand
    #####: 1177:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1178:        return 0;
        -: 1179:        
        -: 1180:
    #####: 1181:    case cutpurse:
        -: 1182:
    #####: 1183:        updateCoins(currentPlayer, state, 2);
    #####: 1184:        for (i = 0; i < state->numPlayers; i++)
        -: 1185:        {
    #####: 1186:            if (i != currentPlayer)
        -: 1187:            {
    #####: 1188:                for (j = 0; j < state->handCount[i]; j++)
        -: 1189:                {
    #####: 1190:                    if (state->hand[i][j] == copper)
        -: 1191:                    {
    #####: 1192:                        discardCard(j, i, state, 0);
    #####: 1193:                        break;
        -: 1194:                    }
    #####: 1195:                    if (j == state->handCount[i])
        -: 1196:                    {
    #####: 1197:                        for (k = 0; k < state->handCount[i]; k++)
        -: 1198:                        {
        -: 1199:                            if (DEBUG)
        -: 1200:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1201:                        }
    #####: 1202:                        break;
        -: 1203:                    }
        -: 1204:                }
        -: 1205:
        -: 1206:            }
        -: 1207:
        -: 1208:        }
        -: 1209:
        -: 1210:        //discard played card from hand
    #####: 1211:        discardCard(handPos, currentPlayer, state, 0);
        -: 1212:
    #####: 1213:        return 0;
        -: 1214:
        -: 1215:
    #####: 1216:    case embargo:
        -: 1217:        //+2 Coins
    #####: 1218:        state->coins = state->coins + 2;
        -: 1219:
        -: 1220:        //see if selected pile is in play
    #####: 1221:        if ( state->supplyCount[choice1] == -1 )
        -: 1222:        {
    #####: 1223:            return -1;
        -: 1224:        }
        -: 1225:
        -: 1226:        //add embargo token to selected supply pile
    #####: 1227:        state->embargoTokens[choice1]++;
        -: 1228:
        -: 1229:        //trash card
    #####: 1230:        discardCard(handPos, currentPlayer, state, 1);
    #####: 1231:        return 0;
        -: 1232:
    #####: 1233:    case outpost:
        -: 1234:        //set outpost flag
    #####: 1235:        state->outpostPlayed++;
        -: 1236:
        -: 1237:        //discard card
    #####: 1238:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1239:        return 0;
        -: 1240:
    #####: 1241:    case salvager:
        -: 1242:        //+1 buy
    #####: 1243:        state->numBuys++;
        -: 1244:
    #####: 1245:        if (choice1)
        -: 1246:        {
        -: 1247:            //gain coins equal to trashed card
    #####: 1248:            state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1249:            //trash card
    #####: 1250:            discardCard(choice1, currentPlayer, state, 1);
        -: 1251:        }
        -: 1252:
        -: 1253:        //discard card
    #####: 1254:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1255:        return 0;
        -: 1256:
    #####: 1257:    case sea_hag:
    #####: 1258:        for (i = 0; i < state->numPlayers; i++) {
    #####: 1259:            if (i != currentPlayer) {
    #####: 1260:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1261:                state->deckCount[i]--;
    #####: 1262:                state->discardCount[i]++;
    #####: 1263:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1264:            }
        -: 1265:        }
    #####: 1266:        return 0;
        -: 1267:
    #####: 1268:    case treasure_map:
        -: 1269:        //search hand for another treasure_map
    #####: 1270:        index = -1;
    #####: 1271:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1272:        {
    #####: 1273:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1274:            {
    #####: 1275:                index = i;
    #####: 1276:                break;
        -: 1277:            }
        -: 1278:        }
    #####: 1279:        if (index > -1)
        -: 1280:        {
        -: 1281:            //trash both treasure cards
    #####: 1282:            discardCard(handPos, currentPlayer, state, 1);
    #####: 1283:            discardCard(index, currentPlayer, state, 1);
        -: 1284:
        -: 1285:            //gain 4 Gold cards
    #####: 1286:            for (i = 0; i < 4; i++)
        -: 1287:            {
    #####: 1288:                gainCard(gold, state, 1, currentPlayer);
        -: 1289:            }
        -: 1290:
        -: 1291:            //return success
    #####: 1292:            return 1;
        -: 1293:        }
        -: 1294:
        -: 1295:        //no second treasure_map found in hand
    #####: 1296:        return -1;
        -: 1297:    }
        -: 1298:
    #####: 1299:    return -1;
        -: 1300:}
        -: 1301:
     1000: 1302:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1303:{
        -: 1304:
        -: 1305:    //if card is not trashed, added to Played pile
     1000: 1306:    if (trashFlag < 1)
        -: 1307:    {
        -: 1308:        //add card to played pile
     1000: 1309:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     1000: 1310:        state->playedCardCount++;
        -: 1311:    }
        -: 1312:
        -: 1313:    //set played card to -1
     1000: 1314:    state->hand[currentPlayer][handPos] = -1;
        -: 1315:
        -: 1316:    //remove card from player's hand
     1000: 1317:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1318:    {
        -: 1319:        //reduce number of cards in hand
    #####: 1320:        state->handCount[currentPlayer]--;
        -: 1321:    }
     1000: 1322:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1323:    {
        -: 1324:        //reduce number of cards in hand
    #####: 1325:        state->handCount[currentPlayer]--;
        -: 1326:    }
        -: 1327:    else
        -: 1328:    {
        -: 1329:        //replace discarded card with last card in hand
     1000: 1330:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1331:        //set last card to -1
     1000: 1332:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1333:        //reduce number of cards in hand
     1000: 1334:        state->handCount[currentPlayer]--;
        -: 1335:    }
        -: 1336:
     1000: 1337:    return 0;
        -: 1338:}
        -: 1339:
      480: 1340:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1341:{
        -: 1342:    //Note: supplyPos is enum of choosen card
        -: 1343:
        -: 1344:    //check if supply pile is empty (0) or card is not used in game (-1)
      480: 1345:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1346:    {
    #####: 1347:        return -1;
        -: 1348:    }
        -: 1349:
        -: 1350:    //added card for [whoseTurn] current player:
        -: 1351:    // toFlag = 0 : add to discard
        -: 1352:    // toFlag = 1 : add to deck
        -: 1353:    // toFlag = 2 : add to hand
        -: 1354:
      480: 1355:    if (toFlag == 1)
        -: 1356:    {
    #####: 1357:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1358:        state->deckCount[player]++;
        -: 1359:    }
      480: 1360:    else if (toFlag == 2)
        -: 1361:    {
    #####: 1362:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1363:        state->handCount[player]++;
        -: 1364:    }
        -: 1365:    else
        -: 1366:    {
      480: 1367:        state->discard[player][ state->discardCount[player] ] = supplyPos;
      480: 1368:        state->discardCount[player]++;
        -: 1369:    }
        -: 1370:
        -: 1371:    //decrease number in supply pile
      480: 1372:    state->supplyCount[supplyPos]--;
        -: 1373:
      480: 1374:    return 0;
        -: 1375:}
        -: 1376:
      735: 1377:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1378:{
        -: 1379:    int i;
        -: 1380:
        -: 1381:    //reset coin count
      735: 1382:    state->coins = 0;
        -: 1383:
        -: 1384:    //add coins for each Treasure card in player's hand
     4410: 1385:    for (i = 0; i < state->handCount[player]; i++)
        -: 1386:    {
     3675: 1387:        if (state->hand[player][i] == copper)
        -: 1388:        {
     2545: 1389:            state->coins += 1;
        -: 1390:        }
     1130: 1391:        else if (state->hand[player][i] == silver)
        -: 1392:        {
    #####: 1393:            state->coins += 2;
        -: 1394:        }
     1130: 1395:        else if (state->hand[player][i] == gold)
        -: 1396:        {
    #####: 1397:            state->coins += 3;
        -: 1398:        }
        -: 1399:    }
        -: 1400:
        -: 1401:    //add bonus
      735: 1402:    state->coins += bonus;
        -: 1403:
      735: 1404:    return 0;
        -: 1405:}
        -: 1406:
        -: 1407:
        -: 1408://end of dominion.c
        -: 1409:
