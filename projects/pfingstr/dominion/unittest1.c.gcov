        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <assert.h>
        -:    7:#include "rngs.h"
        -:    8:
        -:    9:#define CARD_TEST "Ambassador"
        -:   10:
        -:   11:
        -:   12:/*  First you reveal a card from your hand.
        -:   13:    Then take 0, 1, or 2 copies of that card from your hand and put them on top of their Supply pile.
        -:   14:    Then each other player gains a copy of that card from the Supply.
        -:   15:    If there are not enough copies to go around, deal them out in turn order, starting with the player to your left. */
        -:   16:
        -:   17://gcc -o unittest1 dominion.c rngs.c unittest1.c
        -:   18:
function fakeAssert called 16 returned 100% blocks executed 100%
       16:   19:void fakeAssert(int i, int j, int *ErrCnt)
        -:   20:{
       16:   21:    if(i == j)
branch  0 taken 63% (fallthrough)
branch  1 taken 38%
        -:   22:    {
       10:   23:        printf("TEST %d PASSED\n", *ErrCnt);
call    0 returned 100%
        -:   24:    }
        -:   25:    else
        -:   26:    {
        6:   27:        printf("TEST %d FAILED\n", *ErrCnt);
call    0 returned 100%
        -:   28:    }
       16:   29:    *ErrCnt = *ErrCnt+1;
        -:   30:    
       16:   31:}
        -:   32:
function main called 2 returned 100% blocks executed 100%
        2:   33:void main() 
        -:   34:{
        -:   35:    int i;
        -:   36:    
        2:   37:    int handpos = 0, bonus = 0;
        2:   38:    int seed = 1000;
        -:   39:    //number of players
        2:   40:    int numPlayers = 2;
        2:   41:    int player=0;
        -:   42:    //each holds a pointer to game state variable
        -:   43:	struct gameState basePlayer, testPlayer;
        -:   44:    //Kingdom cards avaliable for purchase
        2:   45:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   46:			sea_hag, tribute, smithy, council_room};
        2:   47:    int ErrCnt = 1;
        -:   48:    int count, count2;
        2:   49:    count = count2 = 0;
        -:   50:
        -:   51:
        2:   52:    printf("TESTING - %s\n", CARD_TEST);
call    0 returned 100%
        -:   53:	
        -:   54:    //Initialize a game state and player cards
        2:   55:    fakeAssert(initializeGame(numPlayers, k, seed, &basePlayer), 0, &ErrCnt);
call    0 returned 100%
call    1 returned 100%
        -:   56:
        -:   57:	//Copy the game state of player to testPlayer
        2:   58:	memcpy(&testPlayer, &basePlayer, sizeof(struct gameState));
        -:   59:
        -:   60:    // 2 Check deck count is equal for both
        2:   61:    fakeAssert( (*(int*)testPlayer.deckCount), (*(int*)basePlayer.deckCount), &ErrCnt);
call    0 returned 100%
        -:   62:
        -:   63:    //Add ambassador card to players hand
        2:   64:    testPlayer.hand[player][testPlayer.handCount[player]] = ambassador;
        2:   65:    testPlayer.handCount[player]++;
        -:   66:
        -:   67:    // 2 Check that the ambassador card count is +1 for testplayer
       12:   68:    for (i = 0; i < basePlayer.handCount[player]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       10:   69:        if(basePlayer.hand[player+1][i] = ambassador);
       10:   70:			count++;
        -:   71:    }	
       14:   72:	for (i = 0; i < testPlayer.handCount[player]; i++){
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
       12:   73:        if(testPlayer.hand[player][i] = ambassador);
       12:   74:			count2++;
        -:   75:    }
        2:   76:    fakeAssert(count+1, count2, &ErrCnt);
call    0 returned 100%
        -:   77:    
        2:   78:    fakeAssert(basePlayer.handCount[player] + 1, testPlayer.handCount[player], &ErrCnt);
call    0 returned 100%
        -:   79:    
        -:   80:    //Play ambassador card
        2:   81:    cardEffect(ambassador, 0, 0, 0, &testPlayer, handpos, &bonus);
call    0 returned 100%
        -:   82:	
        -:   83:    ////////////////////////////////////////////////////////
        -:   84:	
        -:   85:	//Check the players hand count decresed after playing card
        2:   86:    fakeAssert(basePlayer.handCount[player], testPlayer.handCount[player]-1, &ErrCnt);
call    0 returned 100%
        -:   87:    
        -:   88:    
        -:   89:
        -:   90:   
        2:   91:    fakeAssert(testPlayer.numActions+1, basePlayer.numActions, &ErrCnt);
call    0 returned 100%
        -:   92:    
        -:   93:    //Reinitilize game
        2:   94:    initializeGame(numPlayers, k, seed, &basePlayer);
call    0 returned 100%
        2:   95:    memcpy(&testPlayer, &basePlayer, sizeof(struct gameState));
        -:   96:    
        -:   97:    //Add minion card to players hand
        2:   98:    testPlayer.hand[player][testPlayer.handCount[player]] = minion;
        2:   99:    testPlayer.handCount[player]++;
        2:  100:    fakeAssert(basePlayer.handCount[player] + 1, testPlayer.handCount[player], &ErrCnt);
call    0 returned 100%
        -:  101:
        -:  102:    //Play minion card with second option
        2:  103:	cardEffect(minion, 0, 1, 0, &testPlayer, handpos, &bonus);
call    0 returned 100%
        -:  104:    
        -:  105:    //Should both eq 4
        2:  106:    fakeAssert(testPlayer.handCount[player], basePlayer.handCount[player], &ErrCnt);
call    0 returned 100%
        -:  107: 
        2:  108:}
        -:  109:
