        -:    0:Source:unittest10.c
        -:    0:Graph:unittest10.gcno
        -:    0:Data:unittest10.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*In the dominion.c cardEffect function, ambassador case, line 1100 to 1106, the program goes through the 
        -:    2:currentPlayer's hand, and tries to find copies of choice1 card.  In this loop, if the i-th card is not 
        -:    3:"ambassador", the same kind of card as the choice1-th card and "i != choice1", count up "j".  But this line 
        -:    4:compares the position "i" with the card in choice1-th position.*/
        -:    5:
        -:    6:#include <stdio.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <string.h>
        -:    9:#include <math.h>
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include "rngs.h"
        -:   13:
        1:   14:void fakeAssert(int i, int j, int *ErrCnt, char *message)
        -:   15:{
        1:   16:    if(i == j)
        -:   17:    {
        1:   18:        printf("TEST %d PASSED - %s\n", *ErrCnt, message);
        -:   19:    }
        -:   20:    else
        -:   21:    {
    #####:   22:        printf("TEST %d FAILED - %s\n", *ErrCnt, message);
        -:   23:    }
        1:   24:    *ErrCnt = *ErrCnt+1;
        1:   25:}
        -:   26:
        1:   27:void ambassador10(struct gameState *post) {
        -:   28:	int i;
        -:   29:    struct gameState pre;
        1:   30:    memcpy (&pre, post, sizeof(struct gameState));
        -:   31:    int ErrCnt;
        1:   32:    ErrCnt = 1;
        1:   33:	int handPos = 0;
        1:   34:	int currentPlayer = 0;
        1:   35:	int choice1 = 0;
        1:   36:	int choice2 = 2;
        -:   37:
        1:   38:    post->hand[0][0] = curse;
        1:   39:    post->hand[0][1] = curse;
        1:   40:    post->hand[0][2] = gold;
        1:   41:    post->hand[0][3] = copper;
        1:   42:    post->hand[0][4] = ambassador;
        -:   43:    
        6:   44:    for (i = 0; i < 5; ++i) {
        5:   45:		drawCard(currentPlayer, post);
        -:   46:	}
        -:   47:
        -:   48:    //return 1 curse to supply
        1:   49:	int r = cardEffect(ambassador, choice1, choice2, 0, post, handPos, 0);
        -:   50:    //printf("%d\n", r);
        1:   51:    fakeAssert(-1, r, &ErrCnt, "incorrect comparrison of position vs card.");
        -:   52:    
        1:   53:}
        -:   54:
        1:   55:int main()
        -:   56:{
        1:   57:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   58:                 remodel, smithy, village, baron, great_hall
        -:   59:                };
        -:   60:
        1:   61:	int playernum = 2;
        1:   62:	int seed = 100;
        -:   63:
        -:   64:	struct gameState G;
        1:   65:	memset(&G, 23, sizeof(struct gameState));
        1:   66:	initializeGame(playernum, k, seed, &G);
        -:   67:
        1:   68:	ambassador10(&G);
        1:   69:    exit(0);
        -:   70:}
