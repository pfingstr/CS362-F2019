        -:    0:Source:unittest9.c
        -:    0:Graph:unittest9.gcno
        -:    0:Data:unittest9.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*Possible bug with the way duplicate "revealed cards" are handled for the Tribute card.  If 
        -:    2:tributeRevealedCards[0] is the same as tributeRevealedCards[1], the code sets tributeRevealedCards[1] 
        -:    3:to -1.  The loop that follows expects 2 entries in the array, which is fine - there are still two entries: index 0 
        -:    4:contains the card and index 1 contains -1.  What isn't fine is there is no condition to catch the -1.*/
        -:    5:
        -:    6://gcc -o unittest9 dominion.c rngs.c unittest9.c .... ./Desktop/cs362
        -:    7:
        -:    8:/*  * If the player after you has fewer than 2 cards left in his deck, he reveals all 
        -:    9:         the cards in his deck, shuffles his discard pile (which does not include currently 
        -:   10:         revealed cards), and then reveals the remainder needed. The player then discards 
        -:   11:         the revealed cards.
        -:   12:    * If the player after you does not have enough cards to reveal 2, he reveals what he can.
        -:   13:    * You get bonuses for the types of cards revealed, counting only the different cards.
        -:   14:    * A card with 2 types gives you both bonuses.
        -:   15:        So if the player to your left reveals Copper and Harem, you get +$4 and +2 cards; 
        -:   16:        if he reveals 2 Silvers, you just get +$2. */
        -:   17:
        -:   18:#include <stdio.h>
        -:   19:#include <stdlib.h>
        -:   20:#include <string.h>
        -:   21:#include <math.h>
        -:   22:#include "dominion.h"
        -:   23:#include "dominion_helpers.h"
        -:   24:#include "rngs.h"
        -:   25:
        -:   26:
        2:   27:void fakeAssert(int i, int j, int *ErrCnt, char *message)
        -:   28:{
        2:   29:    if(i == j)
        -:   30:    {
        2:   31:        printf("TEST %d PASSED - %s\n", *ErrCnt, message);
        -:   32:    }
        -:   33:    else
        -:   34:    {
    #####:   35:        printf("TEST %d FAILED - %s\n", *ErrCnt, message);
        -:   36:    }
        2:   37:    *ErrCnt = *ErrCnt+1;
        2:   38:}
        -:   39:
        1:   40:void tribute9(struct gameState *post)
        -:   41:{
        -:   42:    struct gameState pre;
        1:   43:    memcpy (&pre, post, sizeof(struct gameState));
        -:   44:    int ErrCnt;
        1:   45:    ErrCnt = 1;
        -:   46:	int i;
        1:   47:	int currentPlayer = 0;
        1:   48:	int nextPlayer = 1;
        -:   49:
        7:   50:	for (i = 0; i < 6; ++i) {
        6:   51:		drawCard(currentPlayer, post);
        -:   52:	}
        1:   53:	post->discardCount[nextPlayer] = 5;
        1:   54:	post->deckCount[nextPlayer] = 5;
        -:   55:    //Fill oponents deck:
        1:   56:	post->deck[nextPlayer][0] = copper;
        1:   57:	post->deck[nextPlayer][1] = copper;
        -:   58:    // Fill with estate to control loop bug 7.
        1:   59:	post->deck[nextPlayer][2] = estate;
        -:   60:    // tributerevealedcard [1]:
        1:   61:	post->deck[nextPlayer][3] = copper;
        -:   62:    // tributerevealedcard [0]:
        1:   63:	post->deck[nextPlayer][4] = copper;
        -:   64:    
        1:   65:	cardEffect(tribute, 0,0,0, post, 0, 0);
        -:   66:    //printf("pre actions - %d\n", pre.numActions);
        -:   67:    //printf("post actions - %d\n", post->numActions);
        -:   68:    //printf("pre actions - %d\n", pre.coins);
        -:   69:    //printf("post actions - %d\n", post->coins);
        1:   70:	fakeAssert(pre.numActions + 2, post->numActions, &ErrCnt, "numActions should NOT increase by 2.");
        1:   71:	fakeAssert(post->coins, pre.coins + 2, &ErrCnt, "coins should increase by 2.");
        1:   72:}
        -:   73:
        1:   74:int main()
        -:   75:{
        1:   76:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   77:                 remodel, tribute, village, baron, great_hall
        -:   78:                };
        -:   79:
        1:   80:	int playernum = 2;
        1:   81:	int seed = 100;
        -:   82:	struct gameState G;
        1:   83:	memset(&G, 23, sizeof(struct gameState));
        1:   84:	initializeGame(playernum, k, seed, &G);
        -:   85:    
        1:   86:    printf("Testing for Bug 9.\n");
        1:   87:	tribute9(&G);
        1:   88:    exit(0);
        -:   89:}
