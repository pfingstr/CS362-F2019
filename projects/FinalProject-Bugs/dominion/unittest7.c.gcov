        -:    0:Source:unittest7.c
        -:    0:Graph:unittest7.gcno
        -:    0:Data:unittest7.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*Tribute card bug around line 1075.  The for loop overruns the array. The tributeRevealedCards array has 
        -:    2:two elements and the loop is written to iterate 3 times.*/
        -:    3:
        -:    4:
        -:    5://gcc -o unittest7 dominion.c rngs.c unittest7.c .... /Desktop/cs362/CS362-F2019/projects/pfingstr
        -:    6:
        -:    7:
        -:    8:/* * If the player after you has fewer than 2 cards left in his deck, he reveals all 
        -:    9:         the cards in his deck, shuffles his discard pile (which does not include currently 
        -:   10:         revealed cards), and then reveals the remainder needed. The player then discards the revealed cards.
        -:   11:       * If the player after you does not have enough cards to reveal 2, he reveals what he can.
        -:   12:       * You get bonuses for the types of cards revealed, counting only the different cards.
        -:   13:       * A card with 2 types gives you both bonuses.
        -:   14:         So if the player to your left reveals Copper and Harem, you get +$4 and +2 cards; 
        -:   15:         if he reveals 2 Silvers, you just get +$2.  
        -:   16:         Changed: for (i = 0; i <= 2; i ++) {
        -:   17:        changed to: for (i = 0; i <= 1; i ++) {
        -:   18:        Impact: There will only be max +2 gold for the player.
        -:   19:        2. Removed: shuffle(nextPlayer,state);
        -:   20:    I   mpact: If there are no available cards for next player their deck will not be shuffled.*/
        -:   21:
        -:   22:#include <stdio.h>
        -:   23:#include <stdlib.h>
        -:   24:#include <string.h>
        -:   25:#include <math.h>
        -:   26:#include "dominion.h"
        -:   27:#include "dominion_helpers.h"
        -:   28:#include "rngs.h"
        -:   29:
        2:   30:void fakeAssert(int i, int j, int *ErrCnt, char *message)
        -:   31:{
        2:   32:    if(i == j)
        -:   33:    {
        2:   34:        printf("TEST %d PASSED - %s\n", *ErrCnt, message);
        -:   35:    }
        -:   36:    else
        -:   37:    {
    #####:   38:        printf("TEST %d FAILED - %s\n", *ErrCnt, message);
        -:   39:    }
        2:   40:    *ErrCnt = *ErrCnt+1;
        2:   41:}
        -:   42:
        -:   43:
        1:   44:void tribute7(struct gameState *post)
        -:   45:{
        -:   46:    struct gameState pre;
        1:   47:    memcpy (&pre, post, sizeof(struct gameState));
        -:   48:    int ErrCnt;
        1:   49:    ErrCnt = 1;
        -:   50:	int i;
        1:   51:	int currentPlayer = 0;
        1:   52:	int nextPlayer = 1;
        -:   53:
        7:   54:	for (i = 0; i < 6; ++i) {
        6:   55:		drawCard(currentPlayer, post);
        -:   56:	}
        -:   57:
        1:   58:	post->discardCount[nextPlayer] = 5;
        1:   59:	post->deckCount[nextPlayer] = 5;
        -:   60:
        1:   61:	post->deck[nextPlayer][0] = baron;
        1:   62:	post->deck[nextPlayer][1] = mine;
        -:   63:    // Bug 7 loop also uses this card
        1:   64:	post->deck[nextPlayer][2] = copper;
        -:   65:    // tributerevealedcard [1]:
        1:   66:	post->deck[nextPlayer][3] = mine;
        -:   67:    // tributerevealedcard [0]:
        1:   68:	post->deck[nextPlayer][4] = estate;
        -:   69:
        1:   70:	cardEffect(tribute, 0,0,0, post, 0, 0);
        1:   71:	fakeAssert(pre.numActions + 2, post->numActions, &ErrCnt, "numActions should increase by 2. (mine)");
        1:   72:	fakeAssert(post->coins, pre.coins + 2, &ErrCnt, "coins not supposed to increase but do (copper).");
        1:   73:}
        -:   74:
        1:   75:int main()
        -:   76:{
        1:   77:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   78:                 remodel, tribute, village, baron, great_hall
        -:   79:                };
        -:   80:
        1:   81:	int playernum = 2;
        1:   82:	int seed = 100;
        -:   83:	struct gameState G;
        1:   84:	memset(&G, 23, sizeof(struct gameState));
        1:   85:	initializeGame(playernum, k, seed, &G);
        -:   86:    
        1:   87:    printf ("Testing tributeEffect.\n");
        1:   88:	tribute7(&G);
        1:   89:    exit(0);
        -:   90:}
