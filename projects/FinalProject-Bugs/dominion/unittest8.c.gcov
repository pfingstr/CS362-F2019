        -:    0:Source:unittest8.c
        -:    0:Graph:unittest8.gcno
        -:    0:Data:unittest8.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*The number of bonus coins from actions does not appear to be recorded correctly in cardEffect.*/
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:#include <string.h>
        -:    5:#include <math.h>
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include "rngs.h"
        -:    9:
        2:   10:void fakeAssert(int i, int j, int *ErrCnt, char *message)
        -:   11:{
        2:   12:    if(i == j)
        -:   13:    {
        1:   14:        printf("TEST %d PASSED - %s\n", *ErrCnt, message);
        -:   15:    }
        -:   16:    else
        -:   17:    {
        1:   18:        printf("TEST %d FAILED - %s\n", *ErrCnt, message);
        -:   19:    }
        2:   20:    *ErrCnt = *ErrCnt+1;
        2:   21:}
        -:   22:
        1:   23:void coin8(struct gameState *post)
        -:   24:{
        -:   25:    struct gameState pre;
        1:   26:    memcpy (&pre, post, sizeof(struct gameState));
        -:   27:    int ErrCnt;
        1:   28:    ErrCnt = 1;
        -:   29:	int i;
        1:   30:	int currentPlayer = 0;
        -:   31:	//int nextPlayer = 1;
        -:   32:    int pc;
        -:   33:
        7:   34:	for (i = 0; i < 6; ++i) {
        6:   35:		drawCard(currentPlayer, post);
        -:   36:	}
        -:   37:    
        1:   38:    post->hand[0][0] = baron;
        1:   39:    post->hand[0][1] = curse;
        1:   40:    post->hand[0][2] = estate;
        1:   41:    post->hand[0][3] = copper;
        -:   42:
        -:   43:    //printf("%d\n", pre.coins);
        1:   44:    pc = playCard(0, 1, 0, 0, post);
        -:   45:    //cardEffect(baron, 1, 0,0, post, 0, 0);
        -:   46:    //printf("%d\n", post->coins);
        -:   47:    //printf("%d\n", pc);
        -:   48:
        1:   49:	fakeAssert(pc, 0, &ErrCnt, "PlayCard() returning 0.");
        1:   50:	fakeAssert(post->coins, pre.coins + 4, &ErrCnt, "Coins supposed to increase by 4.");
        1:   51:}
        -:   52:
        1:   53:int main()
        -:   54:{
        1:   55:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   56:                 remodel, tribute, village, baron, great_hall
        -:   57:                };
        -:   58:
        1:   59:	int playernum = 2;
        1:   60:	int seed = 100;
        -:   61:	struct gameState G;
        1:   62:	memset(&G, 23, sizeof(struct gameState));
        1:   63:	initializeGame(playernum, k, seed, &G);
        1:   64:	coin8(&G);
        1:   65:    exit(0);
        -:   66:}
